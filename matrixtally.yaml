# If compiling for yourself and you're also using Bitfocus Companion then use ESPHome 2025.9 or below as there's a breaking change with 2025.10 that the Companion module needs to fix.
substitutions:
  tally_version: "1.3"

esphome:
  name: "matrixtally"
  friendly_name: Matrix Tally Light 2000
  name_add_mac_suffix: true
  comment: Smart Wifi Tally Light M5 Atom Matrix
  project:
    name: esphome.matrix-tally-light-2000
    version: ${tally_version}
  on_boot:
    priority: -100
    then:
      - script.execute: boot_effect

esp32:
  board: m5stack-atom
  framework:
    type: esp-idf

logger:
  level: DEBUG
  logs:
    mpu6886: NONE
    sensor: NONE

web_server:
  version: 3

api:

ota:
  - platform: esphome

wifi:
  # ssid: !secret wifi_ssid
  # password: !secret wifi_password
  # use_address: 192.168.1.191
  ap:
improv_serial:

captive_portal:

i2c:
  sda: 25
  scl: 21
  scan: true

script:
  - id: boot_effect
    then:
      - button.press:
          id: show_1_dot_button
      - delay: 0.4s
      - button.press:
          id: show_2_dots_button
      - delay: 0.4s
      - button.press:
          id: show_3_dots_button
      - delay: 0.4s
      - button.press:
          id: show_4_dots_button
      - delay: 0.4s
      - button.press:
          id: show_5_dots_button
      - delay: 0.4s
      - button.press:
          id: clear_dots_button
      - delay: 0.4s

  - id: show_dots
    parameters:
      num_dots: int
    then:
      - lambda: |-
          id(display_dots) = num_dots;
      - component.update: led_matrix_display
      - if:
          condition:
            lambda: 'return !id(matrix_light).current_values.is_on();'
          then:
            - light.turn_on:
                id: matrix_light
                brightness: !lambda 'return id(led_brightness).state / 100.0;'

  - id: update_tally_display
    then:
      - lambda: |-
          int program = (int)id(current_program_source).state;
          int preview = (int)id(current_preview_source).state;
          int tally_num = (int)id(tally_camera_number).state;
          
          // Update dots based on program source
          if (program >= 1 && program <= 5) {
            id(display_dots) = program;
          } else {
            id(display_dots) = 0;
          }
          
          // Update tally color based on this camera's status
          if (tally_num == program) {
            id(tally_color) = 1; // Program
          } else if (tally_num == preview) {
            id(tally_color) = 2; // Preview
          } else {
            id(tally_color) = 0; // Off
          }
      - component.update: led_matrix_display

  - id: single_click_timeout
    mode: restart
    then:
      - delay: 300ms
      - if:
          condition:
            lambda: 'return id(click_count) == 1;'
          then:
            - binary_sensor.template.publish:
                id: button_released
                state: ON
            - delay: 120ms
            - binary_sensor.template.publish:
                id: button_released
                state: OFF
      - lambda: |-
          id(click_count) = 0;

  - id: double_click_pulse
    then:
      - binary_sensor.template.publish:
          id: button_double_released
          state: ON
      - delay: 150ms
      - binary_sensor.template.publish:
          id: button_double_released
          state: OFF
      - lambda: |-
          id(click_count) = 0;

  - id: long_press_timer
    mode: restart
    then:
      - delay: 800ms
      - if:
          condition:
            lambda: 'return id(raw_button).state && !id(long_press_fired);'
          then:
            - lambda: |-
                id(long_press_fired) = true;
            - binary_sensor.template.publish:
                id: button_long_press
                state: ON
            - delay: 200ms
            - binary_sensor.template.publish:
                id: button_long_press
                state: OFF

globals:
  - id: display_dots
    type: int
    restore_value: no
    initial_value: '0'
  
  - id: tally_color
    type: int
    restore_value: no
    initial_value: '0'

  - id: program_colour
    type: int
    restore_value: yes
    initial_value: '0'

  - id: preview_colour
    type: int
    restore_value: yes
    initial_value: '1'

  - id: full_matrix_mode
    type: bool
    restore_value: yes
    initial_value: 'false'

  - id: hide_dots
    type: bool
    restore_value: yes
    initial_value: 'false'

  - id: click_count
    type: int
    restore_value: no
    initial_value: '0'

  - id: press_started_ms
    type: unsigned long
    restore_value: no
    initial_value: '0'

  - id: long_press_fired
    type: bool
    restore_value: no
    initial_value: 'false'

binary_sensor:
  - platform: gpio
    id: raw_button
    pin:
      number: 39
      inverted: true
    internal: true
    filters:
      - delayed_on: 15ms
      - delayed_off: 15ms
    on_press:
      - lambda: |-
          id(press_started_ms) = millis();
          id(long_press_fired) = false;
      - script.execute: long_press_timer
    on_release:
      - lambda: |-
          if (id(long_press_fired)) {
            id(click_count) = 0;
            return;
          }
          id(click_count)++;
          if (id(click_count) == 1) {
            id(single_click_timeout).execute();
          } else if (id(click_count) == 2) {
            id(single_click_timeout).stop();
            id(double_click_pulse).execute();
          }

  - platform: template
    id: button_released
    icon: mdi:gesture-tap
    name: "Button Single Tap"

  - platform: template
    id: button_double_released
    icon: mdi:gesture-double-tap
    name: "Button Double Tap"

  - platform: template
    id: button_long_press
    icon: mdi:gesture-tap-hold
    name: "Button Long Press"

  - platform: template
    name: "Roll 0째"
    icon: mdi:horizontal-rotate-counterclockwise
    lambda: |-
      return fabs(id(roll_quantized).state - 0.0) < 1.0;

  - platform: template
    name: "Roll 180째"
    icon: mdi:horizontal-rotate-clockwise
    lambda: |-
      return fabs(id(roll_quantized).state - 180.0) < 1.0;

sensor:
  - platform: mpu6886
    address: 0x68
    accel_x:
      id: accel_x
    accel_y:
      id: accel_y
    accel_z:
      id: accel_z
    update_interval: 200ms

  - platform: template
    name: "Roll (Quantized 90째)"
    id: roll_quantized
    internal: true
    unit_of_measurement: "째"
    update_interval: 200ms
    lambda: |-
      float ax = id(accel_x).state;
      float ay = id(accel_y).state;
      float az = id(accel_z).state;
      float roll = atan2(ay, az) * 180.0 / M_PI;
      if (roll < 0) roll += 360.0;
      int candidate = ((int) floor((roll + 45.0f) / 90.0f) * 90) % 360;
      const float PITCH_BLOCK = 0.40f;
      static int last_q = -1;
      if (last_q < 0) {
        last_q = candidate;
        return (float) candidate;
      }
      if (fabs(ax) > PITCH_BLOCK) {
        return (float) last_q;
      }
      const float HYST = 12.0f;
      float diff_angle = fabs(roll - last_q);
      if (candidate != last_q) {
        if (diff_angle > (45.0f + HYST)) {
          last_q = candidate;
        }
      }
      return (float) last_q;

light:
  - platform: esp32_rmt_led_strip
    chipset: ws2812
    rgb_order: GRB
    internal: true
    icon: mdi:led-outline
    pin: 27
    num_leds: 25
    id: matrix_light
    name: "Atom Matrix Light"
    default_transition_length: 0s

button:
  - platform: template
    name: "Preview Tally"
    id: preview_tally_button
    icon: "mdi:eye"
    on_press:
      - lambda: |-
          id(tally_color) = 2;
      - component.update: led_matrix_display
      - if:
          condition:
            lambda: 'return !id(matrix_light).current_values.is_on();'
          then:
            - light.turn_on:
                id: matrix_light
                brightness: !lambda 'return id(led_brightness).state / 100.0;'

  - platform: template
    name: "Program Tally"
    id: program_tally_button
    icon: "mdi:broadcast"
    on_press:
      - lambda: |-
          id(tally_color) = 1;
      - component.update: led_matrix_display
      - if:
          condition:
            lambda: 'return !id(matrix_light).current_values.is_on();'
          then:
            - light.turn_on:
                id: matrix_light
                brightness: !lambda 'return id(led_brightness).state / 100.0;'

  - platform: template
    name: "Clear Preview Tally"
    id: clear_preview_button
    icon: mdi:eye-off
    on_press:
      - lambda: |-
          if (id(tally_color) == 2) {
            id(tally_color) = 0;
          }
      - component.update: led_matrix_display

  - platform: template
    name: "Clear Program Tally"
    id: clear_program_button
    icon: mdi:broadcast-off
    on_press:
      - lambda: |-
          if (id(tally_color) == 1) {
            id(tally_color) = 0;
          }
      - component.update: led_matrix_display

  - platform: template
    name: "Clear Tally"
    id: clear_tally_button
    icon: mdi:dots-grid
    on_press:
      - lambda: |-
          id(tally_color) = 0;
      - component.update: led_matrix_display

  - platform: template
    name: "Show 1 Dot"
    id: show_1_dot_button
    internal: true
    on_press:
      - script.execute:
          id: show_dots
          num_dots: 1

  - platform: template
    name: "Show 2 Dots"
    id: show_2_dots_button
    internal: true
    on_press:
      - script.execute:
          id: show_dots
          num_dots: 2

  - platform: template
    name: "Show 3 Dots"
    id: show_3_dots_button
    internal: true
    on_press:
      - script.execute:
          id: show_dots
          num_dots: 3

  - platform: template
    name: "Show 4 Dots"
    id: show_4_dots_button
    internal: true
    on_press:
      - script.execute:
          id: show_dots
          num_dots: 4

  - platform: template
    name: "Show 5 Dots"
    id: show_5_dots_button
    internal: true
    on_press:
      - script.execute:
          id: show_dots
          num_dots: 5

  - platform: template
    name: "Clear Program Tracker Dots"
    id: clear_dots_button
    icon: mdi:dots-horizontal
    on_press:
      - lambda: |-
          id(display_dots) = 0;
      - component.update: led_matrix_display

  - platform: restart
    name: Reboot
    entity_category: "diagnostic"

switch:
  - platform: template
    name: "Full Screen Tally Mode"
    id: full_matrix_mode_switch
    icon: mdi:grid
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_weight: 3
    entity_category: "config"
    on_turn_on:
      - lambda: |-
          id(full_matrix_mode) = true;
      - component.update: led_matrix_display
    on_turn_off:
      - lambda: |-
          id(full_matrix_mode) = false;
      - component.update: led_matrix_display

  - platform: template
    name: "Hide Program Tracker Dots"
    id: hide_dots_switch
    icon: mdi:dots-horizontal-circle-outline
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    web_server:
      sorting_weight: 4
    entity_category: "config"
    on_turn_on:
      - lambda: |-
          id(hide_dots) = true;
      - component.update: led_matrix_display
    on_turn_off:
      - lambda: |-
          id(hide_dots) = false;
      - component.update: led_matrix_display


number:
  - platform: template
    name: "Current Program Source"
    id: current_program_source
    icon: mdi:broadcast
    optimistic: true
    min_value: 0
    max_value: 5
    step: 1
    initial_value: 0
    on_value:
      then:
        - script.execute: update_tally_display

  - platform: template
    name: "Current Preview Source"
    id: current_preview_source
    icon: mdi:eye-settings
    optimistic: true
    min_value: 0
    max_value: 5
    step: 1
    initial_value: 0
    on_value:
      then:
        - script.execute: update_tally_display

  - platform: template
    name: "Tally Number"
    id: tally_camera_number
    icon: mdi:numeric
    optimistic: true
    min_value: 1
    max_value: 5
    step: 1
    restore_value: true
    web_server:
      sorting_weight: 1
    entity_category: "config"
    on_value:
      then:
        - script.execute: update_tally_display

  - platform: template
    name: "LED Brightness"
    id: led_brightness
    icon: mdi:brightness-percent
    optimistic: true
    min_value: 50
    max_value: 100
    step: 1
    initial_value: 50
    restore_value: true
    unit_of_measurement: "%"
    web_server:
      sorting_weight: 2
    entity_category: "config"
    on_value:
      then:
        - component.update: led_matrix_display

select:
  - platform: template
    name: "Program Colour"
    id: program_colour_select
    icon: mdi:palette
    options:
      - "Red"
      - "Green"
      - "Blue"
      - "Yellow"
    initial_option: "Red"
    restore_value: true
    optimistic: true
    entity_category: "config"
    on_value:
      then:
        - lambda: |-
            if (x == "Red") id(program_colour) = 0;
            else if (x == "Green") id(program_colour) = 1;
            else if (x == "Blue") id(program_colour) = 2;
            else if (x == "Yellow") id(program_colour) = 3;
        - component.update: led_matrix_display

  - platform: template
    name: "Preview Colour"
    id: preview_colour_select
    icon: mdi:palette
    options:
      - "Red"
      - "Green"
      - "Blue"
      - "Yellow"
    initial_option: "Green"
    restore_value: true
    optimistic: true
    entity_category: "config"
    on_value:
      then:
        - lambda: |-
            if (x == "Red") id(preview_colour) = 0;
            else if (x == "Green") id(preview_colour) = 1;
            else if (x == "Blue") id(preview_colour) = 2;
            else if (x == "Yellow") id(preview_colour) = 3;
        - component.update: led_matrix_display

preferences:
  flash_write_interval: 5s

display:
  - platform: addressable_light
    id: led_matrix_display
    addressable_light_id: matrix_light
    width: 5
    height: 5
    rotation: 180
    update_interval: 16ms
    lambda: |-
      float brightness_factor = id(led_brightness).state / 100.0;

      // Define program color based on selection
      Color prog_color;
      if (id(program_colour) == 0) {
        // Pure Red
        prog_color = Color((int)(255*brightness_factor), 0, 0);
      } else if (id(program_colour) == 1) {
        // Pure Green
        prog_color = Color(0, (int)(255*brightness_factor), 0);
      } else if (id(program_colour) == 2) {
        // Pure Blue
        prog_color = Color(0, 0, (int)(255*brightness_factor));
      } else if (id(program_colour) == 3) {
        // Pure Yellow
        prog_color = Color((int)(255*brightness_factor), (int)(255*brightness_factor), 0);
      } else {
        prog_color = Color((int)(255*brightness_factor), 0, 0); // Fallback Red
      }

      // Define preview color based on selection
      Color prev_color;
      if (id(preview_colour) == 0) {
        // Pure Red
        prev_color = Color((int)(255*brightness_factor), 0, 0);
      } else if (id(preview_colour) == 1) {
        // Pure Green
        prev_color = Color(0, (int)(255*brightness_factor), 0);
      } else if (id(preview_colour) == 2) {
        // Pure Blue
        prev_color = Color(0, 0, (int)(255*brightness_factor));
      } else if (id(preview_colour) == 3) {
        // Pure Yellow
        prev_color = Color((int)(255*brightness_factor), (int)(255*brightness_factor), 0);
      } else {
        prev_color = Color(0, (int)(255*brightness_factor), 0); // Fallback Green
      }

      // Fill the top 4 rows based on tally_color
      if (id(tally_color) == 1) {
        it.filled_rectangle(0, 0, 5, 4, prog_color);
      } else if (id(tally_color) == 2) {
        it.filled_rectangle(0, 0, 5, 4, prev_color);
      } else {
        it.filled_rectangle(0, 0, 5, 4, Color(0, 0, 0));
      }

      // Bottom row - either dots or full depending on mode and tally status
      if (id(full_matrix_mode) && id(tally_color) != 0) {
        // Full matrix mode: fill bottom row only when tally is active (program or preview)
        if (id(tally_color) == 1) {
          it.filled_rectangle(0, 4, 5, 1, prog_color);
        } else if (id(tally_color) == 2) {
          it.filled_rectangle(0, 4, 5, 1, prev_color);
        }
      } else if (id(hide_dots)) {
        // Hide tracker mode: fill bottom row with tally color if active, black if not
        if (id(tally_color) == 1) {
          it.filled_rectangle(0, 4, 5, 1, prog_color);
        } else if (id(tally_color) == 2) {
          it.filled_rectangle(0, 4, 5, 1, prev_color);
        } else {
          it.filled_rectangle(0, 4, 5, 1, Color(0, 0, 0));
        }
      } else {
        // Normal tracker mode: show program tracker dots on bottom row
        Color dot_color = prog_color;
        Color black = Color(0, 0, 0);

        for (int i = 0; i < 5; i++) {
          if (i < id(display_dots)) {
            it.draw_pixel_at(i, 4, dot_color);
          } else {
            it.draw_pixel_at(i, 4, black);
          }
        }
      }

text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
      icon: mdi:ip-outline
      update_interval: 15min
    mac_address:
      name: MAC Address
      id: mac_address
      icon: mdi:router-wireless

  - platform: template
    name: "Hostname"
    icon: mdi:pound
    lambda: |-
      return {App.get_name() + ".local"};
    update_interval: 60min
    entity_category: "diagnostic"

  - platform: template
    name: "Firmware Version"
    icon: mdi:information-outline
    lambda: |-
      return {"${tally_version}"};
    update_interval: 12h
    entity_category: "diagnostic"
